import json
import os, sqlite3, logging
from datetime import datetime, timedelta, timezone
from storage import get_goals, get_habits, load_goals, load_habits

STATS_FILE = "data/stats.json"
GOALS_FILE = "goals.json"
HABITS_FILE = "habits.json"

ADMIN_USER_IDS = ["7775321566"] 
OWNER_ID = "7775321566"
ADMIN_USER_IDS = [OWNER_ID]  # –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å —Å–ø–∏—Å–æ–∫

# –µ–¥–∏–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –ø—É—Ç–µ–π –ë–î
DATA_DIR = os.path.join(os.path.dirname(__file__), "data")
PREMIUM_DB_PATH = os.path.join(DATA_DIR, "premium.sqlite3")

def load_stats():
    try:
        with open(STATS_FILE, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_stats(stats):
    # üü£ –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs(os.path.dirname(STATS_FILE), exist_ok=True)
    with open(STATS_FILE, "w") as f:
        json.dump(stats, f, indent=2)


def got_trial(user_id):
    stats = load_stats()
    user = stats.get(str(user_id), {})
    return user.get("got_trial", False)
    
def set_trial(user_id):
    stats = load_stats()
    user = stats.get(str(user_id), {})
    user["got_trial"] = True
    stats[str(user_id)] = user
    save_stats(stats)

def got_referral(user_id):
    stats = load_stats()
    user = stats.get(str(user_id), {})
    return user.get("got_referral", False)

def set_referral(user_id):
    stats = load_stats()
    user = stats.get(str(user_id), {})
    user["got_referral"] = True
    stats[str(user_id)] = user
    save_stats(stats)
    
def add_referral(user_id, referrer_id):
    stats = load_stats()
    user = stats.get(str(user_id), {})
    referrals = user.get("referrals", [])
    if referrer_id not in referrals:
        referrals.append(referrer_id)
    user["referrals"] = referrals
    stats[str(user_id)] = user
    save_stats(stats)

# ==== USER PROGRESS ====

def add_points(user_id: str, amount: int = 1):
    stats = load_stats()
    user_id = str(user_id)
    user = stats.get(user_id, {})
    user["points"] = user.get("points", 0) + amount
    stats[user_id] = user
    save_stats(stats)
    return user["points"]


# –ï—Å–ª–∏ —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —Ç–∞–∫–æ–π —Å–ª–æ–≤–∞—Ä—å –≤ stats.py ‚Äî –æ—Å—Ç–∞–≤—å —Å–≤–æ–π –∏ –Ω–µ –¥—É–±–ª–∏—Ä—É–π.
TITLES = {
    "ru": [(50,"üå± –ù–æ–≤–∏—á–æ–∫"),(100,"‚ú® –ú–æ—Ç–∏–≤–∞—Ç–æ—Ä"),(250,"üî• –£–≤–µ—Ä–µ–Ω–Ω—ã–π"),
           (500,"üíé –ù–∞—Å—Ç–∞–≤–Ω–∏–∫"),(float('inf'),"üåü –õ–µ–≥–µ–Ω–¥–∞")],
    "uk": [(50,"üå± –ù–æ–≤–∞—á–æ–∫"),(100,"‚ú® –ú–æ—Ç–∏–≤–∞—Ç–æ—Ä"),(250,"üî• –í–ø–µ–≤–Ω–µ–Ω–∏–π"),
           (500,"üíé –ù–∞—Å—Ç–∞–≤–Ω–∏–∫"),(float('inf'),"üåü –õ–µ–≥–µ–Ω–¥–∞")],
    "be": [(50,"üå± –ü–∞—á–∞—Ç–∫–æ–≤–µ—Ü"),(100,"‚ú® –ú–∞—Ç—ã–≤–∞—Ç–∞—Ä"),(250,"üî• –£–ø—ç—û–Ω–µ–Ω—ã"),
           (500,"üíé –ù–∞—Å—Ç–∞—û–Ω—ñ–∫"),(float('inf'),"üåü –õ–µ–≥–µ–Ω–¥–∞")],
    "kk": [(50,"üå± –ë–∞—Å—Ç–∞—É—à—ã"),(100,"‚ú® –ú–æ—Ç–∏–≤–∞—Ü–∏—è –±–µ—Ä—É—à—ñ"),(250,"üî• –°–µ–Ω—ñ–º–¥—ñ"),
           (500,"üíé “∞—Å—Ç–∞–∑"),(float('inf'),"üåü –ê“£—ã–∑")],
    "kg": [(50,"üå± –ñ–∞“£—ã –∫–µ–ª–≥–µ–Ω"),(100,"‚ú® –ú–æ—Ç–∏–≤–∞—Ü–∏—è—á—ã"),(250,"üî• –ò—à–µ–Ω–∏–º–¥“Ø“Ø"),
           (500,"üíé –ù–∞c–∞—Ç—á—ã"),(float('inf'),"üåü –õ–µ–≥–µ–Ω–¥–∞")],
    "hy": [(50,"üå± ’Ü’∏÷Ä’•’Ø"),(100,"‚ú® ’Ñ’∏’ø’´’æ’°’ø’∏÷Ä"),(250,"üî• ’é’Ω’ø’°’∞"),
           (500,"üíé ‘Ω’∏÷Ä’∞÷Ä’§’°’ø’∏÷Ç"),(float('inf'),"üåü ‘º’•’£’•’∂’§")],
    "ce": [(50,"üå± –î–∏–∫–∞ —Ö—å–∞–ª—Ö–∞—Ä"),(100,"‚ú® –ú–æ—Ç–∏–≤–∞—Ü–∏—è –∫—Ö–µ—Ç–∞—Ä"),(250,"üî• –î—É–∫—Ö–∞ –≤—É"),
           (500,"üíé –ö—ä–∞—Å—Ç–∏–π–Ω–∞"),(float('inf'),"üåü –õ–µ–≥–µ–Ω–¥–∞")],
    "md": [(50,"üå± √éncepƒÉtor"),(100,"‚ú® Motivator"),(250,"üî• √éncrezƒÉtor"),
           (500,"üíé Mentor"),(float('inf'),"üåü Legenda")],
    "ka": [(50,"üå± ·Éì·Éê·Éõ·É¨·Éß·Éî·Éë·Éò"),(100,"‚ú® ·Éõ·Éù·É¢·Éò·Éï·Éê·É¢·Éù·É†·Éò"),(250,"üî• ·Éì·Éê·É†·É¨·Éõ·É£·Éú·Éî·Éë·É£·Éö·Éò"),
           (500,"üíé ·Éõ·Éî·Éú·É¢·Éù·É†·Éò"),(float('inf'),"üåü ·Éö·Éî·Éí·Éî·Éú·Éì·Éê")],
    "en": [(50,"üå± Newbie"),(100,"‚ú® Motivator"),(250,"üî• Confident"),
           (500,"üíé Mentor"),(float('inf'),"üåü Legend")],
}

def get_user_points(user_id: str) -> int:
    stats = load_stats()
    return stats.get(str(user_id), {}).get("points", 0)

def get_user_title(points: int, lang: str = "ru") -> str:
    lang_titles = TITLES.get(lang, TITLES["ru"])
    for threshold, title in lang_titles:
        if points < threshold:
            return title
    return lang_titles[-1][1]

def get_next_title_info(points: int, lang: str = "ru"):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (next_title, to_next).
    next_title ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–≤–∞–Ω–∏—è (–∏–ª–∏ —Ç–µ–∫—É—â–µ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ),
    to_next ‚Äî —Å–∫–æ–ª—å–∫–æ –æ—á–∫–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å (0, –µ—Å–ª–∏ —É–∂–µ –º–∞–∫—Å–∏–º—É–º).
    """
    lang_titles = TITLES.get(lang, TITLES["ru"])
    for threshold, title in lang_titles:
        if points < threshold:
            return title, int(threshold - points)
    return lang_titles[-1][1], 0

def build_titles_ladder(lang: str = "ru") -> str:
    lang_titles = TITLES.get(lang, TITLES["ru"])
    lines = []
    for threshold, title in lang_titles:
        if threshold == float("inf"):
            lines.append(f"{title} ‚Äî ‚àû")
        else:
            lines.append(f"{title} ‚Äî {int(threshold)}+")
    return "\n".join(lines)
    

def get_stats(user_id: str):
    user_id = str(user_id)

    goals_data = load_goals() or {}
    user_goals = goals_data.get(user_id, [])
    completed_goals = sum(1 for goal in user_goals if goal.get("done"))

    habits_data = load_habits() or {}
    user_habits = habits_data.get(user_id, [])
    completed_habits = sum(1 for habit in user_habits if habit.get("done"))

    # –ï—Å–ª–∏ –≤ —Ü–µ–ª—è—Ö —Ö—Ä–∞–Ω–∏—Ç—Å—è –¥–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, created_at), –º–æ–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–Ω–∏
    days_active = len({g.get("created_at")[:10] for g in user_goals if g.get("created_at")}) if user_goals else 0

    mood_entries = 0  # –µ—Å–ª–∏ –¥–æ–±–∞–≤–∏—à—å —É—á–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π ‚Äî –ø–æ—Å—á–∏—Ç–∞–µ–º —Ç—É—Ç

    return {
        "completed_goals": completed_goals,
        "completed_habits": completed_habits,
        "days_active": days_active,
        "mood_entries": mood_entries,
    }
    
def _collect_activity_dates(user_goals, user_habits):
    dates = set()
    for g in user_goals:
        if isinstance(g, dict) and g.get("done_at"):
            dates.add(g["done_at"])
    for h in user_habits:
        if isinstance(h, dict) and h.get("done_at"):
            dates.add(h["done_at"])
    return dates

def get_user_stats(user_id: str):
    user_id = str(user_id)
    today = datetime.now(timezone.utc).strftime("%Y-%m-%d")

    goals = get_goals(user_id)
    habits = get_habits(user_id)

    total_goals = len(goals)
    completed_goals = sum(1 for g in goals if isinstance(g, dict) and g.get("done"))
    completed_goals_today = sum(1 for g in goals if isinstance(g, dict) and g.get("done_at") == today)

    total_habits = len(habits)
    completed_habits = sum(1 for h in habits if isinstance(h, dict) and h.get("done"))
    completed_habits_today = sum(1 for h in habits if isinstance(h, dict) and h.get("done_at") == today)

    # –ü–æ–∏–Ω—Ç—ã: –±–µ—Ä—ë–º –æ—Ç–∫—É–¥–∞ –µ—Å—Ç—å, –º—è–≥–∫–æ
    points = 0
    try:
        from handlers import user_points  # –µ—Å–ª–∏ –∂–∏–≤—ë—Ç —Ç–∞–º
        points = user_points.get(user_id, 0)
    except Exception:
        try:
            from stats import user_points  # –µ—Å–ª–∏ –∂–∏–≤—ë—Ç —Ç—É—Ç
            points = user_points.get(user_id, 0)
        except Exception:
            points = 0

    return {
        "points": points,
        "total_goals": total_goals,
        "completed_goals": completed_goals,
        "completed_goals_today": completed_goals_today,
        "total_habits": total_habits,
        "completed_habits": completed_habits,
        "completed_habits_today": completed_habits_today,
    }
