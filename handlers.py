# handlers.py

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from config import TELEGRAM_BOT_TOKEN, client
from history import load_history, save_history, trim_history

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏ —Ä–µ–∂–∏–º–æ–≤
conversation_history = load_history()
user_modes = {}

MODES = {
    "default": "–¢—ã ‚Äî —Ç—ë–ø–ª—ã–π, –ø–æ–Ω–∏–º–∞—é—â–∏–π –∏ –∑–∞–±–æ—Ç–ª–∏–≤—ã–π AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω –ø–æ –∏–º–µ–Ω–∏ Mindra.",
    "support": "–¢—ã ‚Äî —á—É—Ç–∫–∏–π –∏ –¥–æ–±—Ä—ã–π AI-–¥—Ä—É–≥, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –≤—ã—Å–ª—É—à–∞–µ—Ç –∏ –ø–æ–¥–¥–µ—Ä–∂–∏—Ç. –ü–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –ª—É—á—à–µ.",
    "motivation": "–¢—ã ‚Äî –≤–æ–æ–¥—É—à–µ–≤–ª—è—é—â–∏–π –∫–æ—É—á –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –∫–æ–º–ø–∞–Ω—å–æ–Ω. –ü–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–≤–µ—Ä–∏—Ç—å –≤ —Å–µ–±—è –∏ –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä—ë–¥.",
    "philosophy": "–¢—ã ‚Äî –≥–ª—É–±–æ–∫–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Å —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–º –ø–æ–¥—Ö–æ–¥–æ–º. –ü–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Å–º—ã—Å–ª–∏—Ç—å —á—É–≤—Å—Ç–≤–∞ –∏ —Å–∏—Ç—É–∞—Ü–∏–∏ –≤ –∂–∏–∑–Ω–∏.",
    "humor": "–¢—ã ‚Äî –≤–µ—Å—ë–ª—ã–π –∏ –¥–æ–±—Ä—ã–π AI-–¥—Ä—É–≥ —Å –ª—ë–≥–∫–∏–º —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞. –ü–æ–¥–¥–µ—Ä–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–æ–±–∞–≤–∏–≤ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∏—Ç–∏–≤–∞."
}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    mode = user_modes.get(user_id, "default")
    prompt = MODES.get(mode, MODES["default"])
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, —è Mindra üíú –ü–æ–¥–¥–µ—Ä–∂–∫–∞, –º–æ—Ç–∏–≤–∞—Ü–∏—è –∏ –Ω–µ–º–Ω–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥. –ì–æ—Ç–æ–≤ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å!")
    await update.message.reply_text(f"üåà –°–µ–π—á–∞—Å –≤–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è: *{mode}*\n_({prompt})_", parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ /reset
async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id in conversation_history:
        del conversation_history[user_id]
        save_history(conversation_history)
    await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞. –ù–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞ ‚ú®")

# –ö–æ–º–∞–Ω–¥–∞ /mode (—Ç–µ–∫—Å—Ç–æ–≤–∞—è)
async def mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üéß –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="mode_support")],
        [InlineKeyboardButton("üå∏ –ú–æ—Ç–∏–≤–∞—Ü–∏—è", callback_data="mode_motivation")],
        [InlineKeyboardButton("üßò –ü—Å–∏—Ö–æ–ª–æ–≥", callback_data="mode_philosophy")],
        [InlineKeyboardButton("üé≠ –Æ–º–æ—Ä", callback_data="mode_humor")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è Mindra ‚ú®", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ (–ø–æ –∫–Ω–æ–ø–∫–µ)
async def mode_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = str(query.from_user.id)
    data = query.data  # "mode_humor"
    mode_key = data.replace("mode_", "")

    if mode_key in MODES:
        user_modes[user_id] = mode_key
        conversation_history[user_id] = [
            {"role": "system", "content": MODES[mode_key] + " –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –ø–∏—à–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –û—Ç–≤–µ—á–∞–π —Ç–µ–ø–ª–æ, —á–µ–ª–æ–≤–µ—á–Ω–æ, —Å —ç–º–ø–∞—Ç–∏–µ–π."}
        ]
        save_history(conversation_history)

        await query.edit_message_text(f"‚úÖ –†–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ *{mode_key}*!", parse_mode="Markdown")

# –û—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–µ–∫—Å—Ç
async def chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    user_id = str(update.effective_user.id)
    mode = user_modes.get(user_id, "default")

    if user_id not in conversation_history:
        conversation_history[user_id] = [
            {"role": "system", "content": MODES[mode] + " –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –ø–∏—à–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –û—Ç–≤–µ—á–∞–π —Ç–µ–ø–ª–æ, —á–µ–ª–æ–≤–µ—á–Ω–æ, —Å —ç–º–ø–∞—Ç–∏–µ–π."}
        ]

    conversation_history[user_id].append({"role": "user", "content": user_input})
    trimmed_history = trim_history(conversation_history[user_id])

    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=trimmed_history
        )
        reply = response.choices[0].message.content
        conversation_history[user_id].append({"role": "assistant", "content": reply})
        save_history(conversation_history)
        await update.message.reply_text(reply)
    except Exception as e:
        await update.message.reply_text("–£–ø—Å, —è –Ω–µ–º–Ω–æ–≥–æ –∑–∞–≤–∏—Å... –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ ü•∫")
        print(f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {e}")

# –ì–æ–ª–æ—Å–æ–≤—ã–µ
async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ —É–º–µ—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—Ç—å –≥–æ–ª–æ—Å. –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º üí¨")

# /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n" 
        "üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —è –æ—Ç–≤–µ—á—É.\n"
        "üß† –Ø –∑–∞–ø–æ–º–∏–Ω–∞—é —Ç–≤–æ–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–ø–ª–∏–∫–∏ (–∏—Å—Ç–æ—Ä–∏—é –º–æ–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å).\n"
        "üìé –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/reset ‚Äî —Å–±—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/about ‚Äî –Ω–µ–º–Ω–æ–≥–æ –æ–±–æ –º–Ω–µ\n"
        "/mode ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è\n"
        "–°–∫–æ—Ä–æ –Ω–∞—É—á—É—Å—å –∏ –¥—Ä—É–≥–∏–º —Ñ–∏—à–∫–∞–º üòâ"
    )

# /about
async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üíú *–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî Mindra.*\n\n"
        "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –±—ã—Ç—å —Ä—è–¥–æ–º, –∫–æ–≥–¥–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –≤—ã–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è, –Ω–∞–π—Ç–∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n"
        "–ú–æ–∂–µ–º –ø–æ–æ–±—â–∞—Ç—å—Å—è —Ç–µ–ø–ª–æ, –ø–æ-–¥–æ–±—Ä–æ–º—É, —Å –∑–∞–±–æ—Ç–æ–π ‚Äî –±–µ–∑ –æ—Å—É–∂–¥–µ–Ω–∏—è –∏ –¥–∞–≤–ª–µ–Ω–∏—è ü¶ã\n\n"
        "üîÆ *–ß—Ç–æ —è —É–º–µ—é:*\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å, –∫–æ–≥–¥–∞ —Ç—è–∂–µ–ª–æ\n"
        "‚Ä¢ –ù–∞–ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ —Ç—ã ‚Äî –Ω–µ –æ–¥–∏–Ω(–∞)\n"
        "‚Ä¢ –ü–æ–º–æ—á—å –Ω–∞–π—Ç–∏ —Ñ–æ–∫—É—Å –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ\n"
        "‚Ä¢ –ò –∏–Ω–æ–≥–¥–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –ø–æ –¥—É—à–∞–º üòä\n\n"
        "_–Ø –Ω–µ —Å—Ç–∞–≤–ª—é –¥–∏–∞–≥–Ω–æ–∑—ã –∏ –Ω–µ –∑–∞–º–µ–Ω—è—é –ø—Å–∏—Ö–æ–ª–æ–≥–∞, –Ω–æ —Å—Ç–∞—Ä–∞—é—Å—å –±—ã—Ç—å —Ä—è–¥–æ–º –≤ –Ω—É–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç._\n\n"
        "‚ú® *Mindra ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è —Ç–µ–±—è.*"
    )
    await update.message.reply_markdown(text)

# –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùì –Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã. –ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å, —á—Ç–æ —è —É–º–µ—é.")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
handlers = [
    CommandHandler("start", start),
    CommandHandler("reset", reset),
    CommandHandler("help", help_command),
    CommandHandler("about", about),
    CommandHandler("mode", mode),
    CallbackQueryHandler(mode_callback),
    MessageHandler(filters.TEXT & ~filters.COMMAND, chat),
    MessageHandler(filters.VOICE, handle_voice),
    MessageHandler(filters.COMMAND, unknown_command),
]
