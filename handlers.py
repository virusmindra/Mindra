# handlers.py

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from config import TELEGRAM_BOT_TOKEN, client
from history import load_history, save_history, trim_history
import random
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from goals import add_goal
from goals import get_goals
from goals import mark_goal_done
from goals import delete_goal
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CallbackQueryHandler

PREMIUM_USERS = {"7775321566"}  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID

premium_tasks = [
    "üßò –ü—Ä–æ–≤–µ–¥–∏ 10 –º–∏–Ω—É—Ç –≤ —Ç–∏—à–∏–Ω–µ. –ü—Ä–æ—Å—Ç–æ —Å—è–¥—å, –∑–∞–∫—Ä–æ–π –≥–ª–∞–∑–∞ –∏ –ø–æ–¥—ã—à–∏. –û—Ç–º–µ—Ç—å, –∫–∞–∫–∏–µ –º—ã—Å–ª–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç.",
    "üìì –ó–∞–ø–∏—à–∏ 3 –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Ü–µ–Ω–∏—à—å –≤ —Å–µ–±–µ. –ù–µ —Ç–æ—Ä–æ–ø–∏—Å—å, –±—É–¥—å —á–µ—Å—Ç–µ–Ω(–Ω–∞).",
    "üí¨ –ü–æ–∑–≤–æ–Ω–∏ –¥—Ä—É–≥—É –∏–ª–∏ —Ä–æ–¥–Ω–æ–º—É —á–µ–ª–æ–≤–µ–∫—É –∏ –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏, —á—Ç–æ —Ç—ã –æ –Ω—ë–º –¥—É–º–∞–µ—à—å.",
    "üß† –ù–∞–ø–∏—à–∏ –Ω–µ–±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç –æ —Å–µ–±–µ –∏–∑ –±—É–¥—É—â–µ–≥–æ ‚Äî –∫–µ–º —Ç—ã —Ö–æ—á–µ—à—å –±—ã—Ç—å —á–µ—Ä–µ–∑ 3 –≥–æ–¥–∞?",
]

async def premium_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    
    if user_id in PREMIUM_USERS:
        task = random.choice(premium_tasks)
        await update.message.reply_text(f"‚ú® *–¢–≤–æ—ë –ø—Ä–µ–º–∏—É–º-–∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n\n{task}", parse_mode="Markdown")
    else:
        keyboard = [
            [InlineKeyboardButton("üíé –£–∑–Ω–∞—Ç—å –æ –ø–æ–¥–ø–∏—Å–∫–µ", url="https://t.me/—Ç–≤–æ–π–±–æ—Ç–∏–ª–∏–ª–µ–Ω–¥–∏–Ω–≥")]
        ]
        await update.message.reply_text(
            "üîí –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º Mindra+.\n"
            "–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∑–∞–¥–∞–Ω–∏—è–º –∏ —Ñ—É–Ω–∫—Ü–∏—è–º ‚ú®",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

# /done ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å —Ü–µ–ª—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
async def mark_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("‚úÖ –ß—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å —Ü–µ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π, –Ω–∞–ø–∏—à–∏ —Ç–∞–∫:\n`/done 1`", parse_mode="Markdown")
        return

    index = int(context.args[0]) - 1
    success = mark_goal_done(user_id, index)

    if success:
        await update.message.reply_text("ü•≥ –ì–æ—Ç–æ–≤–æ! –¶–µ–ª—å –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.")
    else:
        await update.message.reply_text("‚ùå –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–∞–∫—É—é —Ü–µ–ª—å.")

# /delete ‚Äî —É–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å
async def delete_goal_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("‚ùå –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å, –Ω–∞–ø–∏—à–∏ —Ç–∞–∫:\n`/delete 1`", parse_mode="Markdown")
        return

    index = int(context.args[0]) - 1
    success = delete_goal(user_id, index)

    if success:
        await update.message.reply_text("üóëÔ∏è –¶–µ–ª—å —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–∞–∫—É—é —Ü–µ–ª—å.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /goal
async def goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)

    if not context.args:
        await update.message.reply_text("‚úèÔ∏è –ß—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª—å, –Ω–∞–ø–∏—à–∏ —Ç–∞–∫:\n/goal –ü—Ä–æ—á–∏—Ç–∞—Ç—å 10 —Å—Ç—Ä–∞–Ω–∏—Ü –∫–Ω–∏–≥–∏")
        return

    goal_text = " ".join(context.args)
    add_goal(user_id, goal_text)
    await update.message.reply_text(f"üéØ –¶–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: *{goal_text}*", parse_mode="Markdown")
    
# /goals ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π
async def show_goals(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    goals = get_goals(user_id)

    if not goals:
        await update.message.reply_text("üéØ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π. –î–æ–±–∞–≤—å –ø–µ—Ä–≤—É—é —Å –ø–æ–º–æ—â—å—é /goal")
        return

    reply = "üìã *–¢–≤–æ–∏ —Ü–µ–ª–∏:*\n\n"
    for idx, goal in enumerate(goals, 1):
        status = "‚úÖ" if goal["done"] else "üî∏"
        reply += f"{idx}. {status} {goal['text']}\n"

    await update.message.reply_markdown(reply)

async def goal_buttons_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = str(query.from_user.id)
    await query.answer()

    if query.data == "create_goal":
        await query.edit_message_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ—é —Ü–µ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `/goal –ü—Ä–æ—á–∏—Ç–∞—Ç—å 10 —Å—Ç—Ä–∞–Ω–∏—Ü`", parse_mode="Markdown")
    elif query.data == "show_goals":
        from goals import load_goals  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç –≤–µ—Ä–Ω—ã–π
        goals = load_goals().get(user_id, [])
        if not goals:
            await query.edit_message_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π. –î–æ–±–∞–≤—å –ø–µ—Ä–≤—É—é —á–µ—Ä–µ–∑ /goal ‚ú®")
        else:
            goals_list = "\n".join([f"‚Ä¢ {g['text']} {'‚úÖ' if g.get('done') else '‚ùå'}" for g in goals])
            await query.edit_message_text(f"üìã –¢–≤–æ–∏ —Ü–µ–ª–∏:\n{goals_list}")
            
# –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏ —Ä–µ–∂–∏–º–æ–≤
conversation_history = load_history()
user_modes = {}

# –†–µ–∂–∏–º—ã –æ–±—â–µ–Ω–∏—è
MODES = {
    "default": "–¢—ã ‚Äî —Ç—ë–ø–ª—ã–π, –ø–æ–Ω–∏–º–∞—é—â–∏–π –∏ –∑–∞–±–æ—Ç–ª–∏–≤—ã–π AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω –ø–æ –∏–º–µ–Ω–∏ Mindra.",
    "support": "–¢—ã ‚Äî —á—É—Ç–∫–∏–π –∏ –¥–æ–±—Ä—ã–π AI-–¥—Ä—É–≥, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –≤—ã—Å–ª—É—à–∞–µ—Ç –∏ –ø–æ–¥–¥–µ—Ä–∂–∏—Ç. –ü–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –ª—É—á—à–µ.",
    "motivation": "–¢—ã ‚Äî –≤–æ–æ–¥—É—à–µ–≤–ª—è—é—â–∏–π –∫–æ—É—á –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –∫–æ–º–ø–∞–Ω—å–æ–Ω. –ü–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–≤–µ—Ä–∏—Ç—å –≤ —Å–µ–±—è –∏ –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä—ë–¥.",
    "philosophy": "–¢—ã ‚Äî –≥–ª—É–±–æ–∫–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Å —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–º –ø–æ–¥—Ö–æ–¥–æ–º. –ü–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Å–º—ã—Å–ª–∏—Ç—å —á—É–≤—Å—Ç–≤–∞ –∏ —Å–∏—Ç—É–∞—Ü–∏–∏ –≤ –∂–∏–∑–Ω–∏.",
    "humor": "–¢—ã ‚Äî –≤–µ—Å—ë–ª—ã–π –∏ –¥–æ–±—Ä—ã–π AI-–¥—Ä—É–≥ —Å –ª—ë–≥–∫–∏–º —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞. –ü–æ–¥–¥–µ—Ä–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–æ–±–∞–≤–∏–≤ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∏—Ç–∏–≤–∞."
}

# –ü—É–ª –∑–∞–¥–∞–Ω–∏–π –¥–Ω—è (–¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
DAILY_TASKS = [
    "‚ú® –ó–∞–ø–∏—à–∏ 3 –≤–µ—â–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω(–Ω–∞) —Å–µ–≥–æ–¥–Ω—è.",
    "üö∂‚Äç‚ôÇÔ∏è –ü—Ä–æ–≥—É–ª—è–π—Å—è 10 –º–∏–Ω—É—Ç –±–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü—Ä–æ—Å—Ç–æ –¥—ã—à–∏ –∏ –Ω–∞–±–ª—é–¥–∞–π.",
    "üìù –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞.",
    "üåø –ü–æ–ø—Ä–æ–±—É–π –ø—Ä–æ–≤–µ—Å—Ç–∏ 30 –º–∏–Ω—É—Ç –±–µ–∑ —Å–æ—Ü—Å–µ—Ç–µ–π. –ö–∞–∫ –æ—â—É—â–µ–Ω–∏—è?",
    "üíß –í—ã–ø–µ–π —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã –∏ —É–ª—ã–±–Ω–∏—Å—å —Å–µ–±–µ –≤ –∑–µ—Ä–∫–∞–ª–æ. –¢—ã —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è!"
]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id not in conversation_history:
        conversation_history[user_id] = [{"role": "system", "content": MODES["default"]}]
        save_history(conversation_history)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, —è Mindra üíú –ü–æ–¥–¥–µ—Ä–∂–∫–∞, –º–æ—Ç–∏–≤–∞—Ü–∏—è –∏ –Ω–µ–º–Ω–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥. –ì–æ—Ç–æ–≤ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset
async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id in conversation_history:
        del conversation_history[user_id]
        save_history(conversation_history)
    await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞. –ù–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞ ‚ú®")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mode (—Å –∫–Ω–æ–ø–∫–∞–º–∏)
async def mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üéß –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="mode_support")],
        [InlineKeyboardButton("üå∏ –ú–æ—Ç–∏–≤–∞—Ü–∏—è", callback_data="mode_motivation")],
        [InlineKeyboardButton("üßò –ü—Å–∏—Ö–æ–ª–æ–≥", callback_data="mode_philosophy")],
        [InlineKeyboardButton("üé≠ –Æ–º–æ—Ä", callback_data="mode_humor")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è Mindra ‚ú®", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
async def handle_mode_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = str(query.from_user.id)
    mode_key = query.data.replace("mode_", "")

    if mode_key in MODES:
        user_modes[user_id] = mode_key
        conversation_history[user_id] = [{"role": "system", "content": MODES[mode_key]}]
        save_history(conversation_history)
        await query.answer()
        await query.edit_message_text(f"‚úÖ –†–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ *{mode_key}*!", parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    user_id = str(update.effective_user.id)
    mode = user_modes.get(user_id, "default")

    if user_id not in conversation_history:
        conversation_history[user_id] = [
            {"role": "system", "content": MODES[mode] + " –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –ø–∏—à–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –û—Ç–≤–µ—á–∞–π —Ç–µ–ø–ª–æ, —á–µ–ª–æ–≤–µ—á–Ω–æ, —Å —ç–º–ø–∞—Ç–∏–µ–π."}
        ]

    conversation_history[user_id].append({"role": "user", "content": user_input})
    trimmed_history = trim_history(conversation_history[user_id])

    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=trimmed_history
        )
        reply = response.choices[0].message.content
        conversation_history[user_id].append({"role": "assistant", "content": reply})
        save_history(conversation_history)
        await update.message.reply_text(reply)
    except Exception as e:
        await update.message.reply_text("–£–ø—Å, —è –Ω–µ–º–Ω–æ–≥–æ –∑–∞–≤–∏—Å... –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ ü•∫")
        print(f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ —É–º–µ—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—Ç—å –≥–æ–ª–æ—Å. –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º üí¨")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üéØ –ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª—å", callback_data="create_goal")],
        [InlineKeyboardButton("üìã –ú–æ–∏ —Ü–µ–ª–∏", callback_data="show_goals")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —è –æ—Ç–≤–µ—á—É.\n"
        "üß† –Ø –∑–∞–ø–æ–º–∏–Ω–∞—é —Ç–≤–æ–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–ø–ª–∏–∫–∏ (–∏—Å—Ç–æ—Ä–∏—é –º–æ–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å).\n\n"
        "üìé –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/reset ‚Äî —Å–±—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/about ‚Äî –Ω–µ–º–Ω–æ–≥–æ –æ–±–æ –º–Ω–µ\n"
        "/mode ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è\n"
        "/goal ‚Äî –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∏—á–Ω—É—é —Ü–µ–ª—å\n"
        "/goals ‚Äî —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö —Ü–µ–ª–µ–π\n"
        "–°–∫–æ—Ä–æ –Ω–∞—É—á—É—Å—å –∏ –¥—Ä—É–≥–∏–º —Ñ–∏—à–∫–∞–º üòâ",
        reply_markup=reply_markup
    )

# /about
async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üíú *–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî Mindra.*\n\n"
        "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –±—ã—Ç—å —Ä—è–¥–æ–º, –∫–æ–≥–¥–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –≤—ã–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è, –Ω–∞–π—Ç–∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n"
        "–ú–æ–∂–µ–º –ø–æ–æ–±—â–∞—Ç—å—Å—è —Ç–µ–ø–ª–æ, –ø–æ-–¥–æ–±—Ä–æ–º—É, —Å –∑–∞–±–æ—Ç–æ–π ‚Äî –±–µ–∑ –æ—Å—É–∂–¥–µ–Ω–∏—è –∏ –¥–∞–≤–ª–µ–Ω–∏—è ü¶ã\n\n"
        "üîÆ *–ß—Ç–æ —è —É–º–µ—é:*\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å, –∫–æ–≥–¥–∞ —Ç—è–∂–µ–ª–æ\n"
        "‚Ä¢ –ù–∞–ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ —Ç—ã ‚Äî –Ω–µ –æ–¥–∏–Ω(–∞)\n"
        "‚Ä¢ –ü–æ–º–æ—á—å –Ω–∞–π—Ç–∏ —Ñ–æ–∫—É—Å –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ\n"
        "‚Ä¢ –ò –∏–Ω–æ–≥–¥–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –ø–æ –¥—É—à–∞–º üòä\n\n"
        "_–Ø –Ω–µ —Å—Ç–∞–≤–ª—é –¥–∏–∞–≥–Ω–æ–∑—ã –∏ –Ω–µ –∑–∞–º–µ–Ω—è—é –ø—Å–∏—Ö–æ–ª–æ–≥–∞, –Ω–æ —Å—Ç–∞—Ä–∞—é—Å—å –±—ã—Ç—å —Ä—è–¥–æ–º –≤ –Ω—É–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç._\n\n"
        "‚ú® *Mindra ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è —Ç–µ–±—è.*"
    )
    await update.message.reply_markdown(text)

# /task ‚Äî –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å
async def task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    task = random.choice(DAILY_TASKS)
    await update.message.reply_text(f"üéØ –ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å:\n{task}")

# –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùì –Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã. –ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å, —á—Ç–æ —è —É–º–µ—é.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
handlers = [
    CommandHandler("start", start),
    CommandHandler("reset", reset),
    CommandHandler("help", help_command),
    CommandHandler("about", about),
    CommandHandler("mode", mode),
    CommandHandler("task", task),
    CommandHandler("premium_task", premium_task),
    CommandHandler("goal", goal),
    CommandHandler("goals", show_goals),
    CommandHandler("done", mark_done),
    CommandHandler("delete", delete_goal_command),
    CallbackQueryHandler(handle_mode_choice),
    MessageHandler(filters.TEXT & ~filters.COMMAND, chat),
    MessageHandler(filters.VOICE, handle_voice),
    MessageHandler(filters.COMMAND, unknown_command)
]
