import os
import logging
import asyncio
import pytz
from telegram.ext import (
    ApplicationBuilder,
    MessageHandler,
    ContextTypes,
    filters
)
from datetime import datetime, timezone, timedelta, time
from handlers import (
    handlers as all_handlers,
    handle_voice,
    send_idle_reminders_compatible,
    chat
)
from config import TELEGRAM_BOT_TOKEN

logging.basicConfig(level=logging.INFO)

# ‚õë –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update, context):
    logging.error(msg="Exception while handling an update:", exc_info=context.error)
    if update and update.effective_message:
        await update.effective_message.reply_text("üòµ –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –Ø —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞—é—Å—å —Å —ç—Ç–∏–º.")

async def main():
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    # üëâ –°–Ω–∞—á–∞–ª–∞ —Ç–µ–∫—Å—Ç
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat))

    # üëâ –ì–æ–ª–æ—Å
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))

    # üëâ –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
    for handler in all_handlers:
        app.add_handler(handler)

    app.add_error_handler(error_handler)

    # üîÅ Idle reminder
    app.job_queue.run_repeating(
        lambda context: asyncio.create_task(send_idle_reminders_compatible(app)),
        interval=60,
        first=10
    )

    logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await app.run_polling()

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.get_event_loop().run_until_complete(main())
