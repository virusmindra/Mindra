import os
import logging
import asyncio
import pytz
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
from telegram import Update
from telegram.error import TelegramError
from datetime import datetime, timezone, timedelta, time
from handlers import (
    handlers as all_handlers,
    goal_buttons_handler,
    premium_task,
    handle_voice,
    send_daily_reminder,
    user_last_seen,
    user_last_prompted,
    send_idle_reminders_compatible,
)

from goals import get_goals
from config import TELEGRAM_BOT_TOKEN
from handlers import chat, handle_voice

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
for handler in all_handlers:
    app.add_handler(handler)
    
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app.job_queue.run_daily(
    send_daily_reminder,
    time=time(hour=10, minute=0, tzinfo=pytz.timezone("Europe/Kiev")),
    name="morning_reminder"
)

app.job_queue.run_repeating(
    send_idle_reminders_compatible,
    interval=timedelta(seconds=30),  # –≤–º–µ—Å—Ç–æ –º–∏–Ω—É—Ç
    first=timedelta(seconds=10),  # –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
    name="idle_reminder"
)

# ‚õë –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update, context):
    logging.error(msg="Exception while handling an update:", exc_info=context.error)
    if update and update.effective_message:
        await update.effective_message.reply_text("üòµ –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –Ø —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞—é—Å—å —Å —ç—Ç–∏–º.")


async def track_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_last_seen[user_id] = datetime.now(timezone.utc)
    logging.info(f"üëÄ –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è {user_id}")
    
# üîî –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def send_reminders(app):
    for user_id in app.bot_data.get("user_ids", []):
        goals = get_goals(user_id)
        for goal in goals:
            if goal.get("remind") and not goal["done"] and goal.get("deadline"):
                try:
                    deadline = datetime.strptime(goal["deadline"], "%Y-%m-%d")
                    if datetime.now().date() >= deadline.date():
                        await app.bot.send_message(
                            chat_id=int(user_id),
                            text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –Ω–µ –∑–∞–±—É–¥—å –ø—Ä–æ —Ü–µ–ª—å:\n\n*{goal['text']}*",
                            parse_mode="Markdown"
                        )
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º: {e}")

async def run_idle_reminder_loop(app):
    while True:
        try:
            await send_idle_reminders_compatible(app)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ idle reminder loop: {e}")
        await asyncio.sleep(180)  # –∫–∞–∂–¥—ã–µ 3 –º–∏–Ω—É—Ç—ã
                
async def run_idle_reminder_loop(app):
    while True:
        try:
            await send_idle_reminders_compatible(app)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ idle reminder loop: {e}")
        await asyncio.sleep(180)  # –∫–∞–∂–¥—ã–µ 3 –º–∏–Ω—É—Ç—ã

async def main():
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat))

    # üëÇ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))

    # ‚úÖ –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
    for handler in all_handlers:
        app.add_handler(handler)

    # üß† –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    app.add_handler(MessageHandler(filters.ALL, track_users))

    app.add_error_handler(error_handler)

    # üîÅ –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —á–µ—Ä–µ–∑ asyncio
    asyncio.create_task(run_idle_reminder_loop(app))

    app.job_queue.run_repeating(  
        lambda context: asyncio.create_task(send_idle_reminders_compatible(app)),
        interval=60,  # 1 –º–∏–Ω—É—Ç–∞
        first=10
     )
    
    logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await app.run_polling()
    
if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()

    asyncio.get_event_loop().run_until_complete(main())
