import os
import logging
import asyncio
import pytz
from datetime import datetime, timezone, timedelta, time
from telegram.ext import (
    ApplicationBuilder,
    MessageHandler,
    ContextTypes,
    filters
)
from handlers import (
    handlers as all_handlers,
    handle_voice,
    send_idle_reminders_compatible,
    chat,
    get_random_daily_task,  # ‚ú® –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è
    user_last_seen,           # ‚ú® —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    send_evening_checkin
)
from config import TELEGRAM_BOT_TOKEN

logging.basicConfig(level=logging.INFO)

# ‚õë –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update, context):
    logging.error(msg="Exception while handling an update:", exc_info=context.error)
    if update and update.effective_message:
        await update.effective_message.reply_text("üòµ –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –Ø —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞—é—Å—å —Å —ç—Ç–∏–º.")

# ‚ú® –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏—è —É—Ç—Ä–æ–º
async def send_daily_task(context: ContextTypes.DEFAULT_TYPE):
    task = get_random_daily_task()
    # —Ä–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ –∏–∑–≤–µ—Å—Ç–Ω—ã
    if user_last_seen:
        for user_id in user_last_seen.keys():
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üåû –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í–æ—Ç —Ç–≤–æ—ë –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n{task}"
                )
                logging.info(f"‚úÖ –£—Ç—Ä–µ–Ω–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def main():
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    # üëâ –°–Ω–∞—á–∞–ª–∞ —Ç–µ–∫—Å—Ç
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat))

    # üëâ –ì–æ–ª–æ—Å
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))

    # üëâ –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
    for handler in all_handlers:
        app.add_handler(handler)

    app.add_error_handler(error_handler)

    # üîÅ Idle reminder
    app.job_queue.run_repeating(
        lambda context: asyncio.create_task(send_idle_reminders_compatible(app)),
        interval=60,
        first=10
    )

    app.job_queue.run_daily(
        send_evening_checkin,
        time=time(hour=21, minute=0, tzinfo=pytz.timezone("Europe/Kiev")),
        name="evening_checkin"
    )

    # ‚è∞ –£—Ç—Ä–µ–Ω–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00 –ø–æ –ö–∏–µ–≤—É
    app.job_queue.run_daily(
        send_daily_task,
        time=time(hour=10, minute=0, tzinfo=pytz.timezone("Europe/Kiev")),
        name="daily_task_job"
    )

    # ‚ú® –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞ (—Å 9:00 –¥–æ 21:00 –ø–æ –ö–∏–µ–≤—É)
    app.job_queue.run_repeating(
        send_random_support,
        interval=timedelta(hours=3),
        first=timedelta(minutes=5),  # –Ω–∞—á–Ω—ë–º —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
        name="support_messages"
    )

    app.job_queue.run_repeating(
        send_random_poll,
        interval=timedelta(days=2),  # –∫–∞–∂–¥—ã–µ 2 –¥–Ω—è
        first=datetime.now(pytz.timezone("Europe/Kiev")).replace(hour=12, minute=0, second=0, microsecond=0).astimezone(pytz.utc)
    )

    
    logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await app.run_polling()

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.get_event_loop().run_until_complete(main())
